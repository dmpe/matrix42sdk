# ##########
#
# A build resulting in a package upload to Azure Artifacts (private PyPI)
#
# We run parallel Jobs to validate our package against multiple Python versions
# Then we add a new Job to publish to an Artifacts feed after all validation has passed
#
# ##########

# Pipeline-level variables
variables:
  package: matrix42sdk
  srcDirectory: $(Build.SourcesDirectory)
  artifactFeed: my-feed
  publishedVersion: 3.6

# Trigger only when simple_package or its build has been modified
trigger:
  branches:
    include:
      - "*"       # Trigger on all branches, but we'll filter to only publish to Artifacts on pushes to master
  paths:
    include:
    - matrix42sdk/*
    - matrix42sdk/tests

# Jobs are collections of related steps
jobs:

# Our initial Job will lint and test our package against multiple Python versions in parallel
# The name here is significant - we reference it later in the dependsOn property of the Publish job
- job: Build
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml
  # Strategy pattern to run all steps for multiple versions of Python
  strategy:
    matrix:
      python36:
        pythonVersion: 3.6 # centos minimum
      python38:
        pythonVersion: 3.8 # latest
  # Run on a Microsoft-hosted agent running Ubuntu-16.04
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  pool:
    vmImage: ubuntu-latest

  steps:

  # Use a specific Python version
  - task: UsePythonVersion@0
    displayName: Use Python $(pythonVersion)
    inputs:
      versionSpec: $(pythonVersion)

  - bash: pip3 install pip wheel setuptools keyring artifacts-keyring --upgrade
    displayName: update pip and some other basic packages

  - bash: pip3 install poetry
    displayName: install poetry

  - bash: poetry config virtualenvs.create false
    displayName: disable creating virtual environments

  # Install some tools needed for build (pylint, flake8, etc)
  - bash: poetry install
    displayName: Install packages for build

  # Lint via pylint. We need to find all .py files under src/simple_package and run pylint to avoid errors
  # - bash: pylint $(package)
  #   displayName: "Linting: pylint"

  # Lint via black which has better discovery, so we can invoke it directly
  - bash: black .
    displayName: "Linting: black"
    workingDirectory: $(srcDirectory)

  # Run tests
  # - bash: pytest .
  #   displayName: Run tests
  #   workingDirectory: $(srcDirectory)

  # Our built source dist & wheel will land in src/simple_package/dist
  - bash: poetry build -vv -n
    displayName: Build package
    workingDirectory: $(srcDirectory)

  - task: TwineAuthenticate@1
    inputs:
      artifactFeed: 'Matrix42SDK/my-feed'

  - bash: twine upload --config-file $(PYPIRC_PATH) --non-interactive -r my-feed dist/*
    displayName: Publish artifacts

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'dmpe-github'
      scannerMode: 'CLI'
      configMode: 'file'
      configFile: '.sonarcloud.properties'

  - task: SonarCloudAnalyze@1

  - task: WhiteSource Bolt@20
    inputs:
      cwd: '$(srcDirectory)'

# If all Build steps for all Python versions have succeeded,
# we will download one of the already-validated build assets and publish it to an Azure Artifacts feed
- job: Publish

  # Run on a Microsoft-hosted agent running Ubuntu-16.04
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  pool:
    vmImage: ubuntu-latest

  # We want to wait for all Build Jobs to complete before running the Publish Job
  dependsOn: Build

  # Only publish when the previous Jobs are successful and we're building the master branch
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  # Variables specific to the Publish job
  variables:
    artifactName: matrix42sdk-2.0.0-py3-none-any.whl
    pythonVersion: 3.6

  # Steps are the specific tasks that execute code and do things
  steps:

  # Explicitly disable source checkout to keep a pristine environment for publishing
  - checkout: none

  # Download from build artifacts
  - download: current
    artifact: $(artifactName)

  # Set the version of Python to use for publishing (which may or may not match the version the package was built with or tested against)
  - task: UsePythonVersion@0
    displayName: Use Python $(pythonVersion)
    inputs:
      versionSpec: $(pythonVersion)

  # - bash: python3 -m pip install pip wheel setuptools keyring artifacts-keyring --upgrade
  #   displayName: update pip and some other basic packages

  # - bash: pip3 install poetry
  #   displayName: install poetry

  # - bash: poetry config virtualenvs.create false
  #   displayName: disable creating virtual environments

  # - task: TwineAuthenticate@1
  #   inputs:
  #     artifactFeed: 'Matrix42SDK/my-feed'

  # - bash: twine upload --config-file $(PYPIRC_PATH) --non-interactive -r my-feed dist/*
  #   displayName: Publish artifacts

